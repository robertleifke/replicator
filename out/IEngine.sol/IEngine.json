{"abi":[{"type":"function","name":"BUFFER","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"MIN_LIQUIDITY","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"PRECISION","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"allocate","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"recipient","type":"address","internalType":"address"},{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"},{"name":"fromMargin","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"delLiquidity","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"base","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"calibrations","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"strike","type":"uint128","internalType":"uint128"},{"name":"sigma","type":"uint32","internalType":"uint32"},{"name":"maturity","type":"uint32","internalType":"uint32"},{"name":"lastTimestamp","type":"uint32","internalType":"uint32"},{"name":"gamma","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"create","inputs":[{"name":"strike","type":"uint128","internalType":"uint128"},{"name":"sigma","type":"uint32","internalType":"uint32"},{"name":"maturity","type":"uint32","internalType":"uint32"},{"name":"gamma","type":"uint32","internalType":"uint32"},{"name":"quotePerLp","type":"uint256","internalType":"uint256"},{"name":"delLiquidity","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"deposit","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"factory","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"invariantOf","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"invariant","type":"int128","internalType":"int128"}],"stateMutability":"view"},{"type":"function","name":"liquidity","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"liquidity","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"margins","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"balanceQuote","type":"uint128","internalType":"uint128"},{"name":"balanceBase","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"quote","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"remove","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"delLiquidity","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"reserves","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"reserveQuote","type":"uint128","internalType":"uint128"},{"name":"reserveBase","type":"uint128","internalType":"uint128"},{"name":"liquidity","type":"uint128","internalType":"uint128"},{"name":"blockTimestamp","type":"uint32","internalType":"uint32"},{"name":"cumulativeQuote","type":"uint256","internalType":"uint256"},{"name":"cumulativeBase","type":"uint256","internalType":"uint256"},{"name":"cumulativeLiquidity","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"scaleFactorBase","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"scaleFactorQuote","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"swap","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"quoteForBase","type":"bool","internalType":"bool"},{"name":"deltaIn","type":"uint256","internalType":"uint256"},{"name":"deltaOut","type":"uint256","internalType":"uint256"},{"name":"fromMargin","type":"bool","internalType":"bool"},{"name":"toMargin","type":"bool","internalType":"bool"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateLastTimestamp","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"lastTimestamp","type":"uint32","internalType":"uint32"}],"stateMutability":"nonpayable"},{"type":"function","name":"withdraw","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"delQuote","type":"uint256","internalType":"uint256"},{"name":"delBase","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Allocate","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"recipient","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"delQuote","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"delBase","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"delLiquidity","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Create","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"strike","type":"uint128","indexed":false,"internalType":"uint128"},{"name":"sigma","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"maturity","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"gamma","type":"uint32","indexed":true,"internalType":"uint32"},{"name":"delQuote","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"delBase","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"delLiquidity","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Deposit","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"recipient","type":"address","indexed":true,"internalType":"address"},{"name":"delQuote","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"delBase","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Remove","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"delQuote","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"delBase","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"delLiquidity","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Swap","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"recipient","type":"address","indexed":true,"internalType":"address"},{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"quoteForBase","type":"bool","indexed":false,"internalType":"bool"},{"name":"deltaIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"deltaOut","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"UpdateLastTimestamp","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"Withdraw","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"recipient","type":"address","indexed":true,"internalType":"address"},{"name":"delQuote","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"delBase","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"BalanceError","inputs":[]},{"type":"error","name":"CalibrationError","inputs":[{"name":"delquote","type":"uint256","internalType":"uint256"},{"name":"delbase","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"DeltaInError","inputs":[]},{"type":"error","name":"DeltaOutError","inputs":[]},{"type":"error","name":"GammaError","inputs":[{"name":"value","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"InvariantError","inputs":[{"name":"invariant","type":"int128","internalType":"int128"},{"name":"nextInvariant","type":"int128","internalType":"int128"}]},{"type":"error","name":"LockedError","inputs":[]},{"type":"error","name":"MinLiquidityError","inputs":[{"name":"value","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"PoolDuplicateError","inputs":[]},{"type":"error","name":"PoolExpiredError","inputs":[]},{"type":"error","name":"SigmaError","inputs":[{"name":"value","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"StrikeError","inputs":[{"name":"value","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"UninitializedError","inputs":[]},{"type":"error","name":"ZeroDeltasError","inputs":[]},{"type":"error","name":"ZeroLiquidityError","inputs":[]},{"type":"error","name":"baseBalanceError","inputs":[{"name":"expected","type":"uint256","internalType":"uint256"},{"name":"actual","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"quoteBalanceError","inputs":[{"name":"expected","type":"uint256","internalType":"uint256"},{"name":"actual","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"quotePerLpError","inputs":[{"name":"value","type":"uint256","internalType":"uint256"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"BUFFER()":"8fbc3ecd","MIN_LIQUIDITY()":"21b77d63","PRECISION()":"aaf5eb68","allocate(bytes32,address,uint256,uint256,bool,bytes)":"d2957b8f","base()":"5001f3b5","calibrations(bytes32)":"23c5b952","create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)":"be00763a","deposit(address,uint256,uint256,bytes)":"9e48ff5a","factory()":"c45a0155","invariantOf(bytes32)":"546fecae","liquidity(address,bytes32)":"6b35bb6b","margins(address)":"38820465","quote()":"999b93af","remove(bytes32,uint256)":"9f8cfade","reserves(bytes32)":"00bbf1e4","scaleFactorBase()":"886a4eba","scaleFactorQuote()":"e3c0986a","swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)":"ca28fcd6","updateLastTimestamp(bytes32)":"11f99086","withdraw(address,uint256,uint256)":"b5c5f672"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BalanceError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delquote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delbase\",\"type\":\"uint256\"}],\"name\":\"CalibrationError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaInError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeltaOutError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GammaError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"invariant\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"nextInvariant\",\"type\":\"int128\"}],\"name\":\"InvariantError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MinLiquidityError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDuplicateError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolExpiredError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SigmaError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StrikeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UninitializedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDeltasError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroLiquidityError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"baseBalanceError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"quoteBalanceError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"quotePerLpError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delLiquidity\",\"type\":\"uint256\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"sigma\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"maturity\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"gamma\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delLiquidity\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delLiquidity\",\"type\":\"uint256\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"quoteForBase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"UpdateLastTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fromMargin\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"allocate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"calibrations\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"sigma\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maturity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gamma\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"strike\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"sigma\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maturity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gamma\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"quotePerLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"invariantOf\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"invariant\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"margins\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"balanceQuote\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"balanceBase\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delLiquidity\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"reserveQuote\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reserveBase\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactorBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaleFactorQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"quoteForBase\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deltaIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fromMargin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"toMargin\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"updateLastTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lastTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delQuote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delBase\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvariantError(int128,int128)\":[{\"details\":\"Most important check as it verifies the validity of a desired swap\",\"params\":{\"invariant\":\"Pre-swap invariant updated with new tau\",\"nextInvariant\":\"Post-swap invariant after the swap amounts are applied to reserves\"}}],\"baseBalanceError(uint256,uint256)\":[{\"params\":{\"actual\":\"Actual base balance\",\"expected\":\"Expected base balance\"}}],\"quoteBalanceError(uint256,uint256)\":[{\"params\":{\"actual\":\"Actual quote balance\",\"expected\":\"Expected quote balance\"}}]},\"events\":{\"Allocate(address,address,bytes32,uint256,uint256,uint256)\":{\"params\":{\"delBase\":\"Amount of base tokens deposited\",\"delLiquidity\":\"Amount of liquidity granted to `recipient`\",\"delQuote\":\"Amount of quote tokens deposited\",\"from\":\"Method caller `msg.sender`\",\"poolId\":\"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma\",\"recipient\":\"Address that receives liquidity\"}},\"Create(address,uint128,uint32,uint32,uint32,uint256,uint256,uint256)\":{\"details\":\"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma\",\"params\":{\"delBase\":\"Amount of base tokens deposited\",\"delLiquidity\":\"Amount of liquidity granted to `recipient`\",\"delQuote\":\"Amount of quote tokens deposited\",\"from\":\"Calling `msg.sender` of the create function\",\"gamma\":\"Multiplied against swap in amounts to apply fee, equal to 1 - fee % but units are in basis points, valid for (9000, 10_000)\",\"maturity\":\"Timestamp which starts the BUFFER countdown until swaps will cease, in seconds, valid for (block.timestamp, 2^32-1]\",\"sigma\":\"AKA Implied Volatility in basis points, determines the price impact of swaps, valid for (1, 10_000_000)\",\"strike\":\"Marginal price of the pool's quote token at maturity, with the same decimals as the base token, valid [0, 2^128-1]\"}},\"Deposit(address,address,uint256,uint256)\":{\"params\":{\"delBase\":\"Amount of base tokens deposited\",\"delQuote\":\"Amount of quote tokens deposited\",\"from\":\"Method caller `msg.sender`\",\"recipient\":\"Margin account recieving deposits\"}},\"Remove(address,bytes32,uint256,uint256,uint256)\":{\"params\":{\"delBase\":\"Amount of base tokens deposited\",\"delLiquidity\":\"Amount of liquidity decreased from `from`\",\"delQuote\":\"Amount of quote tokens deposited\",\"from\":\"Method caller `msg.sender`\",\"poolId\":\"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma\"}},\"Swap(address,address,bytes32,bool,uint256,uint256)\":{\"params\":{\"deltaIn\":\"Amount of tokens added to reserves\",\"deltaOut\":\"Amount of tokens removed from reserves\",\"from\":\"Method caller `msg.sender`\",\"poolId\":\"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma\",\"quoteForBase\":\"If true, swaps quote to base, else swaps base to quote\",\"recipient\":\"Address that receives `deltaOut` amount of tokens\"}},\"UpdateLastTimestamp(bytes32)\":{\"params\":{\"poolId\":\"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma\"}},\"Withdraw(address,address,uint256,uint256)\":{\"params\":{\"delBase\":\"Amount of base tokens withdrawn\",\"delQuote\":\"Amount of quote tokens withdrawn\",\"from\":\"Method caller `msg.sender`\",\"recipient\":\"Address that tokens are sent to\"}}},\"kind\":\"dev\",\"methods\":{\"BUFFER()\":{\"returns\":{\"_0\":\"Amount of seconds after pool expiry which allows swaps, no swaps after buffer\"}},\"MIN_LIQUIDITY()\":{\"returns\":{\"_0\":\"Amount of liquidity burned on `create()` calls\"}},\"PRECISION()\":{\"returns\":{\"_0\":\"Precision units to scale to when doing token related calculations\"}},\"allocate(bytes32,address,uint256,uint256,bool,bytes)\":{\"params\":{\"data\":\"Arbitrary data that is passed to the allocateCallback function\",\"delBase\":\"Amount of base tokens to add\",\"delQuote\":\"Amount of quote tokens to add\",\"fromMargin\":\"Whether the `msg.sender` pays with their margin balance, or must send tokens\",\"poolId\":\"Keccak256 hash of engine address, strike, sigma, maturity, and gamma\",\"recipient\":\"Address to give the allocated liquidity to\"},\"returns\":{\"delLiquidity\":\"Amount of liquidity given to `recipient`\"}},\"base()\":{\"returns\":{\"_0\":\"base token address, a more accurate name is the quote token\"}},\"calibrations(bytes32)\":{\"params\":{\"poolId\":\"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma\"},\"returns\":{\"gamma\":\"          Multiplied against swap in amounts to apply fee, equal to 1 - fee % but units are in basis points, valid for (9_000, 10_000)\",\"lastTimestamp\":\"  Last timestamp used to calculate time until expiry, aka \\\"tau\\\"\",\"maturity\":\"       Timestamp which starts the BUFFER countdown until swaps will cease, in seconds, valid for (block.timestamp, 2^32-1]\",\"sigma\":\"          AKA Implied Volatility in basis points, determines the price impact of swaps, valid for (1, 10_000_000)\",\"strike\":\"         Marginal price of the pool's quote token at maturity, with the same decimals as the base token, valid [0, 2^128-1]\"}},\"create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)\":{\"params\":{\"data\":\"Arbitrary data that is passed to the createCallback function\",\"delLiquidity\":\"Amount of liquidity units to allocate to the curve, wei value with 18 decimals of precision\",\"gamma\":\"Multiplied against swap in amounts to apply fee, equal to 1 - fee % but units are in basis points, valid for (9_000, 10_000)\",\"maturity\":\"Timestamp which starts the BUFFER countdown until swaps will cease, in seconds, valid for (block.timestamp, 2^32-1]\",\"quotePerLp\":\"quote reserve per liq. with quote decimals, = 1 - N(d1), d1 = (ln(S/K)+(r*\\u03c3^2/2))/\\u03c3\\u221a\\u03c4, valid for [0, 1e^(quote token decimals))\",\"sigma\":\"AKA Implied Volatility in basis points, determines the price impact of swaps, valid for (1, 10_000_000)\",\"strike\":\"Marginal price of the pool's quote token at maturity, with the same decimals as the base token, valid [0, 2^128-1]\"},\"returns\":{\"delBase\":\"  Total amount of base tokens provided to reserves\",\"delQuote\":\"   Total amount of quote tokens provided to reserves\",\"poolId\":\"     Keccak256 hash of engine address, strike, sigma, maturity, and gamma\"}},\"deposit(address,uint256,uint256,bytes)\":{\"params\":{\"data\":\"Arbitrary data that is passed to the depositCallback function\",\"delBase\":\"Amount of base tokens to deposit\",\"delQuote\":\"Amount of quote tokens to deposit\",\"recipient\":\"Recipient margin account of the deposited tokens\"}},\"invariantOf(bytes32)\":{\"params\":{\"poolId\":\"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma\"},\"returns\":{\"invariant\":\"  Signed fixed point 64.64 number, invariant of `poolId`\"}},\"liquidity(address,bytes32)\":{\"params\":{\"poolId\":\"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma\"},\"returns\":{\"liquidity\":\"  Liquidity owned by `account` in `poolId`\"}},\"margins(address)\":{\"params\":{\"account\":\"Margin account to fetch\"},\"returns\":{\"balanceBase\":\"  Balance of the base token\",\"balanceQuote\":\"   Balance of the quote token\"}},\"remove(bytes32,uint256)\":{\"params\":{\"delLiquidity\":\"Amount of liquidity to remove\",\"poolId\":\"Keccak256 hash of engine address, strike, sigma, maturity, and gamma\"},\"returns\":{\"delBase\":\"    Amount of base tokens received from removed liquidity\",\"delQuote\":\"     Amount of quote tokens received from removed liquidity\"}},\"reserves(bytes32)\":{\"params\":{\"poolId\":\"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma\"},\"returns\":{\"blockTimestamp\":\"      Timestamp when the cumulative reserve values were last updated\",\"cumulativeBase\":\"    Cumulative sum of base token reserves of the previous update\",\"cumulativeLiquidity\":\" Cumulative sum of total supply of liquidity of the previous update\",\"cumulativeQuote\":\"     Cumulative sum of quote token reserves of the previous update\",\"liquidity\":\"           Total supply of liquidity for the curve\",\"reserveBase\":\"       base token balance in the reserve\",\"reserveQuote\":\"        quote token balance in the reserve\"}},\"scaleFactorBase()\":{\"returns\":{\"_0\":\"Multiplier to scale amounts to/from, equal to 10^(18 - baseDecimals)\"}},\"scaleFactorQuote()\":{\"returns\":{\"_0\":\"Multiplier to scale amounts to/from, equal to 10^(18 - quoteDecimals)\"}},\"swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)\":{\"params\":{\"data\":\"Arbitrary data that is passed to the swapCallback function\",\"deltaIn\":\"Amount of tokens to swap in\",\"deltaOut\":\"Amount of tokens to swap out\",\"fromMargin\":\"Whether the `msg.sender` uses their margin balance, or must send tokens\",\"poolId\":\"Keccak256 hash of engine address, strike, sigma, maturity, and gamma\",\"quoteForBase\":\"If true, swap quote to base, else swap base to quote\",\"recipient\":\"Address that receives output token `deltaOut` amount\",\"toMargin\":\"Whether the `deltaOut` amount is transferred or deposited into margin\"}},\"updateLastTimestamp(bytes32)\":{\"params\":{\"poolId\":\"Keccak256 hash of engine address, strike, sigma, maturity, and gamma\"},\"returns\":{\"lastTimestamp\":\"Timestamp loaded into the state of the pool's Calibration.lastTimestamp\"}},\"withdraw(address,uint256,uint256)\":{\"params\":{\"delBase\":\"Amount of base tokens to withdraw\",\"delQuote\":\"Amount of quote tokens to withdraw\",\"recipient\":\"Address that tokens are transferred to\"}}},\"title\":\"Engine Interface\",\"version\":1},\"userdoc\":{\"errors\":{\"BalanceError()\":[{\"notice\":\"Thrown when the balanceOf function is not successful and does not return data\"}],\"CalibrationError(uint256,uint256)\":[{\"notice\":\"Thrown when the parameters of a new pool are invalid, causing initial reserves to be 0\"}],\"DeltaInError()\":[{\"notice\":\"Thrown when the deltaIn parameter is 0\"}],\"DeltaOutError()\":[{\"notice\":\"Thrown when the deltaOut parameter is 0\"}],\"GammaError(uint256)\":[{\"notice\":\"Thrown when gamma, equal to 1 - fee %, is outside its bounds: 9_000 <= gamma <= 10_000; 1_000 = 10% fee\"}],\"InvariantError(int128,int128)\":[{\"notice\":\"Thrown when the invariant check fails\"}],\"LockedError()\":[{\"notice\":\"Thrown on attempted re-entrancy on a function with a re-entrancy guard\"}],\"MinLiquidityError(uint256)\":[{\"notice\":\"Thrown when liquidity is lower than or equal to the minimum amount of liquidity\"}],\"PoolDuplicateError()\":[{\"notice\":\"Thrown in create when a pool with computed poolId already exists\"}],\"PoolExpiredError()\":[{\"notice\":\"Thrown when calling an expired pool, where block.timestamp > maturity, + BUFFER if swap\"}],\"SigmaError(uint256)\":[{\"notice\":\"Thrown when sigma is outside the range of acceptable values, 1 <= sigma <= 1e7 with 4 precision\"}],\"StrikeError(uint256)\":[{\"notice\":\"Thrown when strike is not valid, i.e. equal to 0 or greater than 2^128\"}],\"UninitializedError()\":[{\"notice\":\"Thrown when the pool with poolId has not been created\"}],\"ZeroDeltasError()\":[{\"notice\":\"Thrown when the quote or base amount is 0\"}],\"ZeroLiquidityError()\":[{\"notice\":\"Thrown when the liquidity parameter is 0\"}],\"baseBalanceError(uint256,uint256)\":[{\"notice\":\"Thrown when the expected base balance is less than the actual balance\"}],\"quoteBalanceError(uint256,uint256)\":[{\"notice\":\"Thrown when the expected quote balance is less than the actual balance\"}],\"quotePerLpError(uint256)\":[{\"notice\":\"Thrown when quotePerLp is outside the range of acceptable values, 0 < quotePerLp <= 1equoteDecimals\"}]},\"events\":{\"Allocate(address,address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Adds liquidity of quote and base tokens to a specified `poolId`\"},\"Create(address,uint128,uint32,uint32,uint32,uint256,uint256,uint256)\":{\"notice\":\"Creates a pool with liquidity\"},\"Deposit(address,address,uint256,uint256)\":{\"notice\":\"Added base and/or quote tokens to a margin account\"},\"Remove(address,bytes32,uint256,uint256,uint256)\":{\"notice\":\"Adds liquidity of quote and base tokens to a specified `poolId`\"},\"Swap(address,address,bytes32,bool,uint256,uint256)\":{\"notice\":\"Swaps between `quote` and `base` assets\"},\"UpdateLastTimestamp(bytes32)\":{\"notice\":\"Updates the time until expiry of the pool with `poolId`\"},\"Withdraw(address,address,uint256,uint256)\":{\"notice\":\"Removes base and/or quote from a margin account\"}},\"kind\":\"user\",\"methods\":{\"allocate(bytes32,address,uint256,uint256,bool,bytes)\":{\"notice\":\"Allocates quote and base tokens to a specific curve with `poolId`\"},\"calibrations(bytes32)\":{\"notice\":\"Fetches `Calibration` pool parameters\"},\"create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)\":{\"notice\":\"Initializes a curve with parameters in the `calibrations` storage mapping in the Engine\"},\"deposit(address,uint256,uint256,bytes)\":{\"notice\":\"Adds quote and/or base tokens to a `recipient`'s internal balance account\"},\"invariantOf(bytes32)\":{\"notice\":\"Fetches the current invariant, notation is usually `k`, based on quote and base token reserves of pool with `poolId`\"},\"liquidity(address,bytes32)\":{\"notice\":\"Fetches position liquidity an account address and poolId\"},\"margins(address)\":{\"notice\":\"Fetches the margin balances of `account`\"},\"remove(bytes32,uint256)\":{\"notice\":\"Unallocates quote and base tokens from a specific curve with `poolId`\"},\"reserves(bytes32)\":{\"notice\":\"Fetches the global reserve state for a pool with `poolId`\"},\"swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)\":{\"notice\":\"Swaps between `quote` and `base` tokens\"},\"updateLastTimestamp(bytes32)\":{\"notice\":\"Updates the time until expiry of the pool by setting its last timestamp value\"},\"withdraw(address,uint256,uint256)\":{\"notice\":\"Removes quote and/or base tokens from a `msg.sender`'s internal balance account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IEngine.sol\":\"IEngine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/interfaces/IEngine.sol\":{\"keccak256\":\"0xfd1f28b7acb96d3c1d0d29a75230a1714ab6ff04a053464d549d297346dfff48\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://91af9cae2176684a90e8a54c901bcc9476b4d0ec493f9ec0456c60e7d2f2eacc\",\"dweb:/ipfs/QmZ2qRwuJqRvwfw6sMhUihhAHhxu9v6GdVhN3XHvDUKLVZ\"]},\"src/interfaces/engine/IEngineActions.sol\":{\"keccak256\":\"0x0bfe91697e0d6ca7bfce14a11ab8be36c090fa4b7b311c6d8a93628e6e30e99b\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://042f2a2743a85486e08fb426dd55e6761a076c5c101fe11142cbfa699eb286e6\",\"dweb:/ipfs/QmPG2dpDaZjfhtw24eCmV33a4b8aNimNMeTokHAXu4EWko\"]},\"src/interfaces/engine/IEngineErrors.sol\":{\"keccak256\":\"0x84069f32de8c2bba86a7c6a451ebfa55ba1dbaa848fcd1258b2d6ab094e9cfb2\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://221dc37218d8c60d173780812191958c81086b3b2ddb0cacd72c938ef22ecf32\",\"dweb:/ipfs/QmPk8VqUHeChvPRKq848DYc1TpcXpiPVFt99YURoQp2YaZ\"]},\"src/interfaces/engine/IEngineEvents.sol\":{\"keccak256\":\"0xffa32fe58637cc898cbc208ffc68a37b5126886c154d0b7e0a74e715324936d2\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://09bf5fb0d1f4c43daddcb039296f59f2d3038ecd0f94326685227a420d75aef8\",\"dweb:/ipfs/QmcrBArTQdm6rFc7jz7YG4NJ1GZUQXzKD81eaFN267XRYm\"]},\"src/interfaces/engine/IEngineView.sol\":{\"keccak256\":\"0xf68a18d21c7adece86afce8e0829bd0cdbb733a42c7bdf177625f2d66158c560\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://4f019f9600b47e6f6f36adb2b09acefafb5129a3bcab13e499bc0884a5e4d0b0\",\"dweb:/ipfs/QmNwF9wha1WwWKXPRYAnDkNkBW7Dh5Kbt5F9f7n8WR8nqT\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"BalanceError"},{"inputs":[{"internalType":"uint256","name":"delquote","type":"uint256"},{"internalType":"uint256","name":"delbase","type":"uint256"}],"type":"error","name":"CalibrationError"},{"inputs":[],"type":"error","name":"DeltaInError"},{"inputs":[],"type":"error","name":"DeltaOutError"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"type":"error","name":"GammaError"},{"inputs":[{"internalType":"int128","name":"invariant","type":"int128"},{"internalType":"int128","name":"nextInvariant","type":"int128"}],"type":"error","name":"InvariantError"},{"inputs":[],"type":"error","name":"LockedError"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"type":"error","name":"MinLiquidityError"},{"inputs":[],"type":"error","name":"PoolDuplicateError"},{"inputs":[],"type":"error","name":"PoolExpiredError"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"type":"error","name":"SigmaError"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"type":"error","name":"StrikeError"},{"inputs":[],"type":"error","name":"UninitializedError"},{"inputs":[],"type":"error","name":"ZeroDeltasError"},{"inputs":[],"type":"error","name":"ZeroLiquidityError"},{"inputs":[{"internalType":"uint256","name":"expected","type":"uint256"},{"internalType":"uint256","name":"actual","type":"uint256"}],"type":"error","name":"baseBalanceError"},{"inputs":[{"internalType":"uint256","name":"expected","type":"uint256"},{"internalType":"uint256","name":"actual","type":"uint256"}],"type":"error","name":"quoteBalanceError"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"type":"error","name":"quotePerLpError"},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"recipient","type":"address","indexed":true},{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true},{"internalType":"uint256","name":"delQuote","type":"uint256","indexed":false},{"internalType":"uint256","name":"delBase","type":"uint256","indexed":false},{"internalType":"uint256","name":"delLiquidity","type":"uint256","indexed":false}],"type":"event","name":"Allocate","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"uint128","name":"strike","type":"uint128","indexed":false},{"internalType":"uint32","name":"sigma","type":"uint32","indexed":false},{"internalType":"uint32","name":"maturity","type":"uint32","indexed":true},{"internalType":"uint32","name":"gamma","type":"uint32","indexed":true},{"internalType":"uint256","name":"delQuote","type":"uint256","indexed":false},{"internalType":"uint256","name":"delBase","type":"uint256","indexed":false},{"internalType":"uint256","name":"delLiquidity","type":"uint256","indexed":false}],"type":"event","name":"Create","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"recipient","type":"address","indexed":true},{"internalType":"uint256","name":"delQuote","type":"uint256","indexed":false},{"internalType":"uint256","name":"delBase","type":"uint256","indexed":false}],"type":"event","name":"Deposit","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true},{"internalType":"uint256","name":"delQuote","type":"uint256","indexed":false},{"internalType":"uint256","name":"delBase","type":"uint256","indexed":false},{"internalType":"uint256","name":"delLiquidity","type":"uint256","indexed":false}],"type":"event","name":"Remove","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"recipient","type":"address","indexed":true},{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true},{"internalType":"bool","name":"quoteForBase","type":"bool","indexed":false},{"internalType":"uint256","name":"deltaIn","type":"uint256","indexed":false},{"internalType":"uint256","name":"deltaOut","type":"uint256","indexed":false}],"type":"event","name":"Swap","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32","indexed":true}],"type":"event","name":"UpdateLastTimestamp","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"recipient","type":"address","indexed":true},{"internalType":"uint256","name":"delQuote","type":"uint256","indexed":false},{"internalType":"uint256","name":"delBase","type":"uint256","indexed":false}],"type":"event","name":"Withdraw","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"BUFFER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"MIN_LIQUIDITY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"PRECISION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"},{"internalType":"bool","name":"fromMargin","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"allocate","outputs":[{"internalType":"uint256","name":"delLiquidity","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"base","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"calibrations","outputs":[{"internalType":"uint128","name":"strike","type":"uint128"},{"internalType":"uint32","name":"sigma","type":"uint32"},{"internalType":"uint32","name":"maturity","type":"uint32"},{"internalType":"uint32","name":"lastTimestamp","type":"uint32"},{"internalType":"uint32","name":"gamma","type":"uint32"}]},{"inputs":[{"internalType":"uint128","name":"strike","type":"uint128"},{"internalType":"uint32","name":"sigma","type":"uint32"},{"internalType":"uint32","name":"maturity","type":"uint32"},{"internalType":"uint32","name":"gamma","type":"uint32"},{"internalType":"uint256","name":"quotePerLp","type":"uint256"},{"internalType":"uint256","name":"delLiquidity","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"create","outputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"deposit"},{"inputs":[],"stateMutability":"view","type":"function","name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"invariantOf","outputs":[{"internalType":"int128","name":"invariant","type":"int128"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"liquidity","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"margins","outputs":[{"internalType":"uint128","name":"balanceQuote","type":"uint128"},{"internalType":"uint128","name":"balanceBase","type":"uint128"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"quote","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"uint256","name":"delLiquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"remove","outputs":[{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"reserves","outputs":[{"internalType":"uint128","name":"reserveQuote","type":"uint128"},{"internalType":"uint128","name":"reserveBase","type":"uint128"},{"internalType":"uint128","name":"liquidity","type":"uint128"},{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"uint256","name":"cumulativeQuote","type":"uint256"},{"internalType":"uint256","name":"cumulativeBase","type":"uint256"},{"internalType":"uint256","name":"cumulativeLiquidity","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"scaleFactorBase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"scaleFactorQuote","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"poolId","type":"bytes32"},{"internalType":"bool","name":"quoteForBase","type":"bool"},{"internalType":"uint256","name":"deltaIn","type":"uint256"},{"internalType":"uint256","name":"deltaOut","type":"uint256"},{"internalType":"bool","name":"fromMargin","type":"bool"},{"internalType":"bool","name":"toMargin","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"swap"},{"inputs":[{"internalType":"bytes32","name":"poolId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"updateLastTimestamp","outputs":[{"internalType":"uint32","name":"lastTimestamp","type":"uint32"}]},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"delQuote","type":"uint256"},{"internalType":"uint256","name":"delBase","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"withdraw"}],"devdoc":{"kind":"dev","methods":{"BUFFER()":{"returns":{"_0":"Amount of seconds after pool expiry which allows swaps, no swaps after buffer"}},"MIN_LIQUIDITY()":{"returns":{"_0":"Amount of liquidity burned on `create()` calls"}},"PRECISION()":{"returns":{"_0":"Precision units to scale to when doing token related calculations"}},"allocate(bytes32,address,uint256,uint256,bool,bytes)":{"params":{"data":"Arbitrary data that is passed to the allocateCallback function","delBase":"Amount of base tokens to add","delQuote":"Amount of quote tokens to add","fromMargin":"Whether the `msg.sender` pays with their margin balance, or must send tokens","poolId":"Keccak256 hash of engine address, strike, sigma, maturity, and gamma","recipient":"Address to give the allocated liquidity to"},"returns":{"delLiquidity":"Amount of liquidity given to `recipient`"}},"base()":{"returns":{"_0":"base token address, a more accurate name is the quote token"}},"calibrations(bytes32)":{"params":{"poolId":"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma"},"returns":{"gamma":"          Multiplied against swap in amounts to apply fee, equal to 1 - fee % but units are in basis points, valid for (9_000, 10_000)","lastTimestamp":"  Last timestamp used to calculate time until expiry, aka \"tau\"","maturity":"       Timestamp which starts the BUFFER countdown until swaps will cease, in seconds, valid for (block.timestamp, 2^32-1]","sigma":"          AKA Implied Volatility in basis points, determines the price impact of swaps, valid for (1, 10_000_000)","strike":"         Marginal price of the pool's quote token at maturity, with the same decimals as the base token, valid [0, 2^128-1]"}},"create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)":{"params":{"data":"Arbitrary data that is passed to the createCallback function","delLiquidity":"Amount of liquidity units to allocate to the curve, wei value with 18 decimals of precision","gamma":"Multiplied against swap in amounts to apply fee, equal to 1 - fee % but units are in basis points, valid for (9_000, 10_000)","maturity":"Timestamp which starts the BUFFER countdown until swaps will cease, in seconds, valid for (block.timestamp, 2^32-1]","quotePerLp":"quote reserve per liq. with quote decimals, = 1 - N(d1), d1 = (ln(S/K)+(r*σ^2/2))/σ√τ, valid for [0, 1e^(quote token decimals))","sigma":"AKA Implied Volatility in basis points, determines the price impact of swaps, valid for (1, 10_000_000)","strike":"Marginal price of the pool's quote token at maturity, with the same decimals as the base token, valid [0, 2^128-1]"},"returns":{"delBase":"  Total amount of base tokens provided to reserves","delQuote":"   Total amount of quote tokens provided to reserves","poolId":"     Keccak256 hash of engine address, strike, sigma, maturity, and gamma"}},"deposit(address,uint256,uint256,bytes)":{"params":{"data":"Arbitrary data that is passed to the depositCallback function","delBase":"Amount of base tokens to deposit","delQuote":"Amount of quote tokens to deposit","recipient":"Recipient margin account of the deposited tokens"}},"invariantOf(bytes32)":{"params":{"poolId":"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma"},"returns":{"invariant":"  Signed fixed point 64.64 number, invariant of `poolId`"}},"liquidity(address,bytes32)":{"params":{"poolId":"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma"},"returns":{"liquidity":"  Liquidity owned by `account` in `poolId`"}},"margins(address)":{"params":{"account":"Margin account to fetch"},"returns":{"balanceBase":"  Balance of the base token","balanceQuote":"   Balance of the quote token"}},"remove(bytes32,uint256)":{"params":{"delLiquidity":"Amount of liquidity to remove","poolId":"Keccak256 hash of engine address, strike, sigma, maturity, and gamma"},"returns":{"delBase":"    Amount of base tokens received from removed liquidity","delQuote":"     Amount of quote tokens received from removed liquidity"}},"reserves(bytes32)":{"params":{"poolId":"Keccak256 hash of the engine address, strike, sigma, maturity, and gamma"},"returns":{"blockTimestamp":"      Timestamp when the cumulative reserve values were last updated","cumulativeBase":"    Cumulative sum of base token reserves of the previous update","cumulativeLiquidity":" Cumulative sum of total supply of liquidity of the previous update","cumulativeQuote":"     Cumulative sum of quote token reserves of the previous update","liquidity":"           Total supply of liquidity for the curve","reserveBase":"       base token balance in the reserve","reserveQuote":"        quote token balance in the reserve"}},"scaleFactorBase()":{"returns":{"_0":"Multiplier to scale amounts to/from, equal to 10^(18 - baseDecimals)"}},"scaleFactorQuote()":{"returns":{"_0":"Multiplier to scale amounts to/from, equal to 10^(18 - quoteDecimals)"}},"swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)":{"params":{"data":"Arbitrary data that is passed to the swapCallback function","deltaIn":"Amount of tokens to swap in","deltaOut":"Amount of tokens to swap out","fromMargin":"Whether the `msg.sender` uses their margin balance, or must send tokens","poolId":"Keccak256 hash of engine address, strike, sigma, maturity, and gamma","quoteForBase":"If true, swap quote to base, else swap base to quote","recipient":"Address that receives output token `deltaOut` amount","toMargin":"Whether the `deltaOut` amount is transferred or deposited into margin"}},"updateLastTimestamp(bytes32)":{"params":{"poolId":"Keccak256 hash of engine address, strike, sigma, maturity, and gamma"},"returns":{"lastTimestamp":"Timestamp loaded into the state of the pool's Calibration.lastTimestamp"}},"withdraw(address,uint256,uint256)":{"params":{"delBase":"Amount of base tokens to withdraw","delQuote":"Amount of quote tokens to withdraw","recipient":"Address that tokens are transferred to"}}},"version":1},"userdoc":{"kind":"user","methods":{"allocate(bytes32,address,uint256,uint256,bool,bytes)":{"notice":"Allocates quote and base tokens to a specific curve with `poolId`"},"calibrations(bytes32)":{"notice":"Fetches `Calibration` pool parameters"},"create(uint128,uint32,uint32,uint32,uint256,uint256,bytes)":{"notice":"Initializes a curve with parameters in the `calibrations` storage mapping in the Engine"},"deposit(address,uint256,uint256,bytes)":{"notice":"Adds quote and/or base tokens to a `recipient`'s internal balance account"},"invariantOf(bytes32)":{"notice":"Fetches the current invariant, notation is usually `k`, based on quote and base token reserves of pool with `poolId`"},"liquidity(address,bytes32)":{"notice":"Fetches position liquidity an account address and poolId"},"margins(address)":{"notice":"Fetches the margin balances of `account`"},"remove(bytes32,uint256)":{"notice":"Unallocates quote and base tokens from a specific curve with `poolId`"},"reserves(bytes32)":{"notice":"Fetches the global reserve state for a pool with `poolId`"},"swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes)":{"notice":"Swaps between `quote` and `base` tokens"},"updateLastTimestamp(bytes32)":{"notice":"Updates the time until expiry of the pool by setting its last timestamp value"},"withdraw(address,uint256,uint256)":{"notice":"Removes quote and/or base tokens from a `msg.sender`'s internal balance account"}},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IEngine.sol":"IEngine"},"evmVersion":"paris","libraries":{}},"sources":{"src/interfaces/IEngine.sol":{"keccak256":"0xfd1f28b7acb96d3c1d0d29a75230a1714ab6ff04a053464d549d297346dfff48","urls":["bzz-raw://91af9cae2176684a90e8a54c901bcc9476b4d0ec493f9ec0456c60e7d2f2eacc","dweb:/ipfs/QmZ2qRwuJqRvwfw6sMhUihhAHhxu9v6GdVhN3XHvDUKLVZ"],"license":"GPL-3.0-only"},"src/interfaces/engine/IEngineActions.sol":{"keccak256":"0x0bfe91697e0d6ca7bfce14a11ab8be36c090fa4b7b311c6d8a93628e6e30e99b","urls":["bzz-raw://042f2a2743a85486e08fb426dd55e6761a076c5c101fe11142cbfa699eb286e6","dweb:/ipfs/QmPG2dpDaZjfhtw24eCmV33a4b8aNimNMeTokHAXu4EWko"],"license":"GPL-3.0-only"},"src/interfaces/engine/IEngineErrors.sol":{"keccak256":"0x84069f32de8c2bba86a7c6a451ebfa55ba1dbaa848fcd1258b2d6ab094e9cfb2","urls":["bzz-raw://221dc37218d8c60d173780812191958c81086b3b2ddb0cacd72c938ef22ecf32","dweb:/ipfs/QmPk8VqUHeChvPRKq848DYc1TpcXpiPVFt99YURoQp2YaZ"],"license":"GPL-3.0-only"},"src/interfaces/engine/IEngineEvents.sol":{"keccak256":"0xffa32fe58637cc898cbc208ffc68a37b5126886c154d0b7e0a74e715324936d2","urls":["bzz-raw://09bf5fb0d1f4c43daddcb039296f59f2d3038ecd0f94326685227a420d75aef8","dweb:/ipfs/QmcrBArTQdm6rFc7jz7YG4NJ1GZUQXzKD81eaFN267XRYm"],"license":"GPL-3.0-only"},"src/interfaces/engine/IEngineView.sol":{"keccak256":"0xf68a18d21c7adece86afce8e0829bd0cdbb733a42c7bdf177625f2d66158c560","urls":["bzz-raw://4f019f9600b47e6f6f36adb2b09acefafb5129a3bcab13e499bc0884a5e4d0b0","dweb:/ipfs/QmNwF9wha1WwWKXPRYAnDkNkBW7Dh5Kbt5F9f7n8WR8nqT"],"license":"GPL-3.0-only"}},"version":1},"id":17}